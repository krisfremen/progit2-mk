[[_interactive_staging]]
=== Интерактивно стажирање

Во овој дел, ќе погледнете неколку интерактивни команди за Git кои можат да ви помогнат лесно да ги обучите вашите обврски да вклучуваат само одредени комбинации и делови од датотеки.
Овие алатки се корисни ако промените одреден број на датотеки и потоа одлучете дека сакате тие промени да бидат во неколку фокусирани обврски, а не една голема неуредна заложба.
На овој начин, можете да бидете сигурни дека вашите обврски се логички одделни промени и лесно можат да бидат разгледани од програмерите кои работат со вас.

Ако го стартувате `git add` со опцијата` -i` или `--interactive`, Git влегува во интерактивен режим на школка, прикажувајќи нешто слично:

[source,console]
----
$ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now>
----

Можете да видите дека оваа команда ви покажува многу поинаков поглед на вашата област на поставување отколку што веројатно сте навикнати - во основа, истите информации што ги добивате со `git status`, но малку посочи и информативни.
Ги наведува промените што сте ги направиле на левата и неизменетата промена на десната страна.

По ова доаѓа секцијата `` Команди '', која ви овозможува да направите голем број на нешта како стопирање и дестабилизација на датотеки, поставување делови од датотеки, додавање на необучени датотеки и прикажување на разлики во она што е изведено.

==== Поставување и уништување на датотеки

Ако го напишете `2` или` u` во прилогот `Што сега>`, ќе бидете известени за кои датотеки сакате да ги завршите:

[source,console]
----
What now> 2
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

За да ги поставите датотеките `TODO` и` index.html`, можете да внесете броеви:

[source,console]
----
Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

The `*` next to each file means the file is selected to be staged.
If you press Enter after typing nothing at the `Update>>` prompt, Git takes anything selected and stages it for you:

[source,console]
----
Update>>
updated 2 paths

*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 1
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

Сега можете да видите дека датотеките `TODO` и` index.html` се изведени и датотеката `simplegit.rb` сеуште не е инсталирана.
Ако сакате да ја одложите датотеката `TODO` во оваа точка, ја користите опцијата` 3` или `r` (за враќање):

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 3
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path
----

Повторно гледајќи го вашиот Git статус, можете да видите дека сте ја избришале датотеката `TODO`:

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

За да ја видите разликата од она што сте го направиле, можете да ја користите командата `6` или` d` (за diff).
Тоа ви прикажува листа на вашите изведени датотеки, и можете да ги изберете оние за кои би сакале да ја видите изведената разлика.
Ова е слично како да се специфицира `git diff -cached` на командната линија:

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 6
           staged     unstaged path
  1:        +1/-1      nothing index.html
Review diff>> 1
diff --git a/index.html b/index.html
index 4d07108..4335f49 100644
--- a/index.html
+++ b/index.html
@@ -16,7 +16,7 @@ Date Finder

 <p id="out">...</p>

-<div id="footer">contact : support@github.com</div>
+<div id="footer">contact : email.support@github.com</div>

 <script type="text/javascript">
----

Со овие основни команди, можете да го користите интерактивниот режим за додавање, за полесно да се справи со вашата сцена.

==== Поставени закрпи

Исто така, Git може да фати одредени _parts_ датотеки, а не останатите.
На пример, ако направите две промени во вашата датотека `simplegit.rb` и сакате да поставите една од нив, а не другата, тоа е многу лесно во Git.
Од истиот интерактивен повик објаснет во претходниот дел, напишете `5` или` p` (за лепенка).
Git ќе ве праша кои датотеки сакате делумно да се етаблирате; тогаш, за секој дел од избраните датотеки, тој ќе прикаже логови на датотеката diff и ќе праша дали би сакале да ги фаќате, еден по еден:

[source,console]
----
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index dd5ecc4..57399e0 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -22,7 +22,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command("git log -n 25 #{treeish}")
+    command("git log -n 30 #{treeish}")
   end

   def blame(path)
Stage this hunk [y,n,a,d,/,j,J,g,e,?]?
----

Имате многу опции во овој момент.
Внесувањето `?` Покажува листа на она што можете да направите:

[source,console]
----
Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?
y - stage this hunk
n - do not stage this hunk
a - stage this and all the remaining hunks in the file
d - do not stage this hunk nor any of the remaining hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
----

Општо земено, ќе напишете `y` или` n` ако сакате да го поставите секое парче, но да ги поставите сите нив во одредени датотеки или да прескокнете некоја одлука додека не можете подоцна и подоцна.
Ако фаќате еден дел од датотеката и оставете друг дел да биде неизложен, вашиот излез за статус ќе изгледа вака:

[source,console]
----
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:        +1/-1        +4/-0 lib/simplegit.rb
----

Интересен е статусот на датотеката `simplegit.rb`.
Тоа ви покажува дека неколку линии се изведени и неколку не се поставени.
Делумно сте ја изведеле оваа датотека.
Во овој момент, можете да излезете од скриптата за интерактивно додавање и да стартувате `git commit 'за да извршите делумно изведени датотеки.

Вие исто така не треба да бидете во режим на интерактивен додаток за да го направите делумното поставување на датотеки - можете да го започнете истиот скрипта со користење на `git add -p` или` git add -patch` во командната линија.

Понатаму, можете да го користите patch режим за делумно ресетирање на датотеките со командата `git reset --patch`, за проверка на делови од датотеки со командата` git checkout --patch` и за складирање на делови од датотеки со ` команда --patch`.
Ние ќе одиме во повеќе детали за секоја од овие како што се до понапредни примени на овие команди.
